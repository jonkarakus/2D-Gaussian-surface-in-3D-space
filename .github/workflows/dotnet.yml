name: Gaussian3D WPF Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x
    
    - name: Find solution file
      id: find-solution
      run: |
        # Let's be specific about which solution to use
        # Priority: 1. Gaussian3D.sln, 2. Any .sln with "Gaussian" in the name, 3. First .sln file
        
        # Check for solutions in order of preference
        $slnPath = $null
        
        if (Test-Path "Gaussian3D.sln") {
          $slnPath = "Gaussian3D.sln"
        }
        elseif (Test-Path "*Gaussian*.sln") {
          $slnPath = (Get-ChildItem -Filter "*Gaussian*.sln" | Select-Object -First 1).Name
        }
        elseif (Test-Path "*.sln") {
          $slnPath = (Get-ChildItem -Filter "*.sln" | Select-Object -First 1).Name
        }
        
        if ($slnPath) {
          Write-Host "Solution found: $slnPath"
          echo "::set-output name=solution::$slnPath"
          echo "SOLUTION_PATH=$slnPath" >> $env:GITHUB_ENV
        } else {
          Write-Host "No solution file found. Creating a temporary one."
          dotnet new sln -n Gaussian3D
          
          # Find and add all .csproj files to the solution
          Get-ChildItem -Recurse -Filter "*.csproj" | ForEach-Object {
            dotnet sln Gaussian3D.sln add $_.FullName
          }
          
          echo "::set-output name=solution::Gaussian3D.sln"
          echo "SOLUTION_PATH=Gaussian3D.sln" >> $env:GITHUB_ENV
        }
      shell: pwsh
    
    - name: List csproj files
      run: |
        Write-Host "Listing all .csproj files in repository:"
        Get-ChildItem -Recurse -Filter "*.csproj" | ForEach-Object {
          Write-Host $_.FullName
        }
      shell: pwsh
    
    - name: Create project file if needed
      run: |
        # Check if we have at least one .csproj file
        $csprojCount = (Get-ChildItem -Recurse -Filter "*.csproj" | Measure-Object).Count
        
        if ($csprojCount -eq 0) {
          Write-Host "No project files found. Creating a basic WPF project."
          
          # Create WPF project
          New-Item -Path "Gaussian3D" -ItemType Directory -Force
          
          # Create very basic .csproj file
          @"
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6.0-windows</TargetFramework>
    <UseWPF>true</UseWPF>
  </PropertyGroup>
</Project>
"@ | Set-Content -Path "Gaussian3D/Gaussian3D.csproj"

          # Add to solution
          dotnet sln $env:SOLUTION_PATH add Gaussian3D/Gaussian3D.csproj
          
          # Copy source files if they exist
          $codeFiles = Get-ChildItem -Recurse -Filter "*.cs" | Where-Object { $_.FullName -notlike "*\Gaussian3D\*" }
          $xamlFiles = Get-ChildItem -Recurse -Filter "*.xaml" | Where-Object { $_.FullName -notlike "*\Gaussian3D\*" }
          
          foreach ($file in $codeFiles) {
            $destPath = Join-Path "Gaussian3D" $file.Name
            Copy-Item $file.FullName -Destination $destPath -Force
            Write-Host "Copied $($file.Name) to project"
          }
          
          foreach ($file in $xamlFiles) {
            $destPath = Join-Path "Gaussian3D" $file.Name
            Copy-Item $file.FullName -Destination $destPath -Force
            Write-Host "Copied $($file.Name) to project"
          }
        }
      shell: pwsh
    
    - name: Restore dependencies 
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Test
      if: ${{ success() }}
      run: |
        $testProjects = Get-ChildItem -Recurse -Filter "*[Tt]est*.csproj"
        if ($testProjects.Count -gt 0) {
          dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build
        } else {
          Write-Host "No test projects found, skipping tests"
        }
      shell: pwsh
